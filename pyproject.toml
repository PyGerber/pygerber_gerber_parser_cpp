[tool.poetry]
name = "pygerber-gerber-parser-cpp"
version = "0.0.1"
description = "Gerber parser implemented in C++"
authors = ["Krzysztof Wi≈õniewski <argmaster.world@gmail.com>"]
license = "MIT"
readme = "README.md"
build = "__build__.py"
packages = [{ include = "pygerber_gerber_parser_cpp", from = "python" }]
include = [
    { path = "python/pygerber_gerber_parser_cpp/**/*.so", format = "wheel" },
    { path = "python/pygerber_gerber_parser_cpp/**/*.pyd", format = "wheel" },
]
[tool.poetry.dependencies]
python = "^3.8"

[tool.poetry.group.dev.dependencies]
cmake = "^3.30.4"
ninja = "^1.11.1.1"
pytest = "^8.3.3"
poethepoet = "^0.29.0"
mypy = "^1.11.2"
typing-extensions = "^4.12.2"

[build-system]
requires = ["poetry-core", "cmake>=3.28,<4.0", "ninja>=1.11.1"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
install-hooks = [
    { cmd = "poetry install --no-ansi --all-extras" },
    { cmd = "poetry run pre-commit install --install-hooks --overwrite" },
]
run-hooks = [
    { cmd = "poetry install --no-ansi --all-extras --no-root" },
    { cmd = "poetry run pre-commit run --all-files -v" },
]
build-release-cpp = [
    { cmd = "poetry install --no-ansi --no-ansi --all-extras --no-root" },
    { cmd = "poetry run cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -G Ninja" },
    { cmd = "poetry run cmake --build build --target all --parallel" },
]
build-debug-cpp = [
    { cmd = "poetry install --no-ansi --no-ansi --all-extras --no-root" },
    { cmd = "poetry run cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -G Ninja" },
    { cmd = "poetry run cmake --build build --target all --parallel" },
]
ctest = [
    { cmd = "poetry run poe build-debug-cpp" },
    { cmd = "poetry run ctest --test-dir build --output-on-failure" },
]
run-type-checks = [
    { cmd = "poetry install --no-ansi --all-extras" },
    { cmd = "poetry run mypy --config-file=pyproject.toml python/pygerber_gerber_parser_cpp/" },
]


[tool.ruff]
lint.select = ["ALL"]
lint.ignore = [
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in {name}
    "ANN101", # Missing type annotation for {name} in method
    "ANN102", # Missing type annotation for {name} in classmethod
    "D203",   # 1 blank line required before class docstring
    "D205",   # 1 blank line required between summary line and description
    "D213",   # Multi-line docstring summary should start at the second line
    "UP007",  # Use X | Y for type annotations
    "UP006",  # Checks for the use of generics that can be replaced with standard library variants based on PEP 585.
    "TCH001", # Checks for first-party imports that are only used for type annotations, but aren't defined in a type-checking block.
    "D105",   # Adding docstrings in all magic methods doesn't make sense, as usually they are just boilerplate to support operators.
    "FIX002", # Line contains TODO, consider resolving the issue
    "D107",   # Adding docstring to __init__ doesn't make sense when class already has its docstring.
    "ISC001", # Checks for the absence of trailing commas. Conflicts with ruff format.
    "COM812", # Checks for implicitly concatenated strings on a single line. Conflicts with ruff format.
    "S101",   # Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
    "EXE002", # Breaks on file systems which do not support executable permissions.
]
show-fixes = true
target-version = "py38"
src = ["src", "test"]

[tool.ruff.lint.pylint]
max-args = 8

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "FrozenGeneralModel",
    "BaseModel",
]

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true
# Use `\n` line endings for all files
line-ending = "lf"

[tool.mypy] # ANCHOR: tool.mypy
# ---------------------------------------------------------------------------- #
#            https://mypy.readthedocs.io/en/stable/config_file.html            #
#            https://mypy.readthedocs.io/en/stable/command_line.html           #
#          https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html          #
# ---------------------------------------------------------------------------- #
python_version = "3.8"
# A regular expression that matches file names, directory names and paths which
# mypy should ignore while recursively discovering files to check. Use forward
#slashes (/) as directory separators on all platforms.
exclude = ["external/", ".tox/", ".venv/", ".vscode/", "docs/", "scripts/"]
# ---------------------------------------------------------------------------- #
#                               Import discovery                               #
# ---------------------------------------------------------------------------- #
# Suppresses error messages about imports that cannot be resolved.
ignore_missing_imports = true
# Directs what to do with imports when the imported module is found as a .py file
# and not part of the files, modules and packages provided on the command line.
# The four possible values are normal, silent, skip and error. For explanations
# see the discussion for the --follow-imports command line flag.
follow_imports = "normal"
# Enables reporting error messages generated within installed packages (see
# :pep:`561` for more details on distributing type information). Those error
# messages are suppressed by default, since you are usually not able to
# control errors in 3rd party code.
no_silence_site_packages = false
# This flag tells mypy that top-level packages will be based in either the current
# directory, or a member of the MYPYPATH environment variable or mypy_path config
# option. This option is only useful in the absence of __init__.py. See Mapping file
# paths to modules for details.
explicit_package_bases = false
# ---------------------------------------------------------------------------- #
#                            Disallow dynamic typing                           #
# ---------------------------------------------------------------------------- #
# Disallows usage of types that come from unfollowed imports (anything imported from
# an unfollowed import is automatically given a type of ``Any``).
disallow_any_unimported = false
# Disallows all expressions in the module that have type ``Any``.
disallow_any_expr = false
# Disallows functions that have ``Any`` in their signature after decorator transformation.
disallow_any_decorated = false
# Disallows explicit ``Any`` in type positions such as type annotations and generic
# type parameters.
disallow_any_explicit = false
# Disallows usage of generic types that do not specify explicit type parameters.
disallow_any_generics = false
# Disallows subclassing a value of type ``Any``.
disallow_subclassing_any = false
# ---------------------------------------------------------------------------- #
#                         Untyped definitions and calls                        #
# ---------------------------------------------------------------------------- #
# Disallows calling functions without type annotations from functions with type
# annotations.
disallow_untyped_calls = false
# Disallows defining functions without type annotations or with incomplete type
# annotations.
disallow_untyped_defs = true
# Disallows defining functions with incomplete type annotations.
disallow_incomplete_defs = true
# Type-checks the interior of functions without type annotations.
check_untyped_defs = true
# Reports an error whenever a function with type annotations is decorated with a
# decorator without annotations.
disallow_untyped_decorators = false
# ---------------------------------------------------------------------------- #
#                          None and Optional handling                          #
# ---------------------------------------------------------------------------- #
# Changes the treatment of arguments with a default value of ``None`` by not implicitly
# making their type :py:data:`~typing.Optional`.
no_implicit_optional = true
# Enables or disables strict Optional checks. If False, mypy treats ``None``
# as compatible with every type.
strict_optional = true
# ---------------------------------------------------------------------------- #
#                                   Warnings                                   #
# ---------------------------------------------------------------------------- #
# warns about casting an expression to its inferred type.
warn_redundant_casts = true
# Warns about unneeded ``# type: ignore`` comments.
warn_unused_ignores = false
# Shows errors for missing return statements on some execution paths.
warn_no_return = true
# Shows a warning when returning a value with type ``Any`` from a function
# declared with a non- ``Any`` return type.
warn_return_any = true
# Shows a warning when encountering any code inferred to be unreachable or
# redundant after performing type analysis.
warn_unreachable = true
# ---------------------------------------------------------------------------- #
#                        Miscellaneous strictness flags                        #
# ---------------------------------------------------------------------------- #
# Causes mypy to suppress errors caused by not being able to fully
# infer the types of global and class variables.
allow_untyped_globals = false
# Allows variables to be redefined with an arbitrary type, as long as the redefinition
# is in the same block and nesting level as the original definition.
# Example where this can be useful:
allow_redefinition = true
# Disallows inferring variable type for ``None`` from two assignments in different scopes.
# This is always implicitly enabled when using the :ref:`mypy daemon <mypy_daemon>`.
local_partial_types = false
# By default, imported values to a module are treated as exported and mypy allows
# other modules to import them. When false, mypy will not re-export unless
# the item is imported using from-as or is included in ``__all__``. Note that mypy
# treats stub files as if this is always disabled. For example:
no_implicit_reexport = false
# Prohibit equality checks, identity checks, and container checks between
# non-overlapping types.
strict_equality = true
# ---------------------------------------------------------------------------- #
#      https://mypy.readthedocs.io/en/stable/error_codes.html#error-codes      #
# ---------------------------------------------------------------------------- #
# Allows disabling one or multiple error codes globally.
# disable_error_code =
# Allows enabling one or multiple error codes globally.
enable_error_code = "redundant-expr"
# ---------------------------------------------------------------------------- #
#                          Configuring error messages                          #
# ---------------------------------------------------------------------------- #
# Prefixes each error with the relevant context.
show_error_context = true
# Shows column numbers in error messages.
show_column_numbers = true
# hows error codes in error messages. See :ref:`error-codes` for more information.
show_error_codes = true
# Use visually nicer output in error messages: use soft word wrap,
# show source code snippets, and show error location markers.
pretty = true
# Shows error messages with color enabled.
color_output = true
# Shows a short summary line after error messages.
error_summary = true
# Show absolute paths to files.
show_absolute_path = true
